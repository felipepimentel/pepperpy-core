[tool.poetry]
name = "pepperpy-core"
version = "0.1.0"
description = "Core package for PepperPy Framework"
authors = ["Felipe Pimentel <fpimentel88@gmail.com>"]
readme = "README.md"
packages = [{ include = "pepperpy_core", from = "src" }]
repository = "https://github.com/pimentel/pepperpy-core"
documentation = "https://pepperpy.readthedocs.io/"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.12"
python-dotenv = "^1.0.1"
pydantic = "^2.6.3"
structlog = "^24.4.0"
pyyaml = "^6.0.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
ruff = "^0.8.4"
dagger-io = "^0.15.1"
mypy = "^1.9.0"
bandit = "^1.7.8"
coverage = "^7.4.4"
anyio = "^4.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.setuptools.package-data]
"pepperpy_core" = ["py.typed"]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=pepperpy_core --cov-report=xml --cov-report=term"
testpaths = ["tests"]
filterwarnings = ["ignore::pytest.PytestCollectionWarning"]

[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",
    "F",
    "B",
    "I",
    "N",
    "UP",
    "ANN001",
    "ANN002",
    "ANN003",
    "S",
    "A",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "ISC",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.coverage.run]
source = ["pepperpy_core"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
fail_under = 80
